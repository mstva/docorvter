{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docorvter","text":"<p>A document converter backend API.</p>"},{"location":"reference/summary/","title":"Summary","text":"<ul> <li>backend<ul> <li>api<ul> <li>converter<ul> <li>document_converter<ul> <li>converter<ul> <li>converter</li> <li>html_converter</li> </ul> </li> <li>document<ul> <li>document</li> <li>pdf_document</li> </ul> </li> </ul> </li> <li>tasks</li> <li>urls</li> <li>views</li> </ul> </li> <li>files<ul> <li>models</li> <li>serializers</li> <li>storage</li> <li>urls</li> <li>views</li> </ul> </li> <li>users<ul> <li>jwt_auth</li> <li>models</li> <li>serializers</li> <li>urls</li> <li>views</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/backend/api/","title":"api","text":"<p>This package contains the backend API endpoints.</p> Sub-packages <ul> <li><code>converter</code>: Provide endpoints for converting files.</li> <li><code>files</code>: Provide endpoints to manage files.</li> <li><code>users</code>: Provide endpoints for user login and registration.</li> </ul>"},{"location":"reference/backend/api/converter/","title":"converter","text":"<p>This package contains the converter endpoints.</p> Sub-packages <ul> <li><code>document_converter</code>: A package that is responsible for converting documents.</li> </ul> Modules <ul> <li><code>tasks</code>:     A module that contains celery tasks of converter package.</li> <li><code>urls</code>:     A module that contains urls of converter package.</li> <li><code>views</code>:     A module that contains converter views.</li> </ul>"},{"location":"reference/backend/api/converter/tasks/","title":"tasks","text":"<p>A module that contains all Celery tasks of the converter.</p> Functions <ul> <li><code>convert_html_file(file_id)</code>: A function that convert html file to pdf file asynchronously.</li> <li><code>rename_html_file(html_file, file_id)</code>: A function that rename the html file.</li> <li><code>rename_output_file(output_file, file_id)</code>: A function that rename the output file.</li> </ul>"},{"location":"reference/backend/api/converter/tasks/#backend.api.converter.tasks.convert_html_file","title":"<code>convert_html_file(file_id)</code>","text":"<p>Convert an HTML file to PDF asynchronously using the HtmlConverter class.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>The ID of the File object to be converted.</p> required Source code in <code>backend/api/converter/tasks.py</code> <pre><code>@shared_task\ndef convert_html_file(file_id: str) -&gt; None:\n\"\"\"Convert an HTML file to PDF asynchronously using the HtmlConverter class.\n\n    Args:\n        file_id: The ID of the File object to be converted.\n    \"\"\"\n    file = File.objects.get(file_id=file_id)\n\n    output_file = f\"{settings.MEDIA_ROOT}/out.pdf\"\n\n    html_converter = HtmlConverter()\n    html_converter.convert(file=file.html_file.path, output=output_file)\n\n    file.converted_at = datetime.now()\n    file.html_file = rename_html_file(file.html_file.path, file_id)\n    file.pdf_file = rename_output_file(output_file, file_id)\n    file.save()\n\n    os.remove(output_file)\n</code></pre>"},{"location":"reference/backend/api/converter/tasks/#backend.api.converter.tasks.rename_html_file","title":"<code>rename_html_file(html_file, file_id)</code>","text":"<p>Rename the html file.</p> <p>Parameters:</p> Name Type Description Default <code>html_file</code> <code>str</code> <p>the html file path</p> required <code>file_id</code> <code>str</code> <p>the file id to renamed to</p> required <p>Returns:</p> Type Description <code>str</code> <p>The new renamed html file path</p> Source code in <code>backend/api/converter/tasks.py</code> <pre><code>def rename_html_file(html_file: str, file_id: str) -&gt; str:\n\"\"\"Rename the html file.\n\n    Args:\n        html_file: the html file path\n        file_id: the file id to renamed to\n\n    Returns:\n        The new renamed html file path\n    \"\"\"\n    HTML_FILES_DIR = f'{settings.MEDIA_ROOT}/html_files'\n\n    new_html_file = f'{HTML_FILES_DIR}/{file_id}.html'\n    os.rename(html_file, new_html_file)\n\n    return new_html_file\n</code></pre>"},{"location":"reference/backend/api/converter/tasks/#backend.api.converter.tasks.rename_output_file","title":"<code>rename_output_file(output_file, file_id)</code>","text":"<p>Rename the output file.</p> <p>Parameters:</p> Name Type Description Default <code>output_file</code> <code>str</code> <p>the old output file path</p> required <code>file_id</code> <code>str</code> <p>the file id to renamed to</p> required <p>Returns:</p> Type Description <code>str</code> <p>The new renamed output file path</p> Source code in <code>backend/api/converter/tasks.py</code> <pre><code>def rename_output_file(output_file: str, file_id: str) -&gt; str:\n\"\"\"Rename the output file.\n\n    Args:\n        output_file: the old output file path\n        file_id: the file id to renamed to\n\n    Returns:\n        The new renamed output file path\n    \"\"\"\n    PDF_FILES_DIR = f'{settings.MEDIA_ROOT}/pdf_files'\n\n    if not os.path.exists(PDF_FILES_DIR):\n        os.makedirs(PDF_FILES_DIR)\n\n    new_output_file = f\"{PDF_FILES_DIR}/{file_id}.pdf\"\n    shutil.copy(output_file, new_output_file)\n\n    return new_output_file\n</code></pre>"},{"location":"reference/backend/api/converter/urls/","title":"urls","text":"<p>This module defines the urls of the converter views.</p> Variables <ul> <li>urlpatterns: A list of url patterns of converter views.</li> </ul>"},{"location":"reference/backend/api/converter/views/","title":"views","text":"<p>A module that contains the converter views.</p> Classes <ul> <li><code>HtmlConvertAPI</code>: A class that hold the endpoint of converting html files.</li> </ul>"},{"location":"reference/backend/api/converter/views/#backend.api.converter.views.HtmlConvertAPI","title":"<code>HtmlConvertAPI</code>","text":"<p>         Bases: <code>views.APIView</code></p> <p>API View for converting an HTML file to PDF asynchronously.</p> <p>This class handles POST requests to convert an HTML file to a PDF file using Celery worker to process the conversion task asynchronously.</p> <p>Attributes:</p> Name Type Description <code>`authentication_classes`</code> <p>List of authentication classes. Default is JWTAuthentication.</p> Methods <ul> <li><code>post(request)</code>: Handles POST requests and performs the HTML to PDF conversion.</li> </ul> Source code in <code>backend/api/converter/views.py</code> <pre><code>class HtmlConvertAPI(views.APIView):\n\"\"\"API View for converting an HTML file to PDF asynchronously.\n\n    This class handles POST requests to convert an HTML file to a PDF file\n    using Celery worker to process the conversion task asynchronously.\n\n    Attributes:\n        `authentication_classes`: List of authentication classes. Default is JWTAuthentication.\n\n    Methods:\n        - `post(request)`: Handles POST requests and performs the HTML to PDF conversion.\n    \"\"\"\n\n    authentication_classes = [JWTAuthentication]\n\n    def post(self, request: Request) -&gt; Response:\n\"\"\"Perform HTML to PDF conversion and return a response.\n\n        Args:\n            request: HTTP request containing the HTML file to convert.\n\n        Returns:\n            Response with status code and message.\n        \"\"\"\n        if not request.user:\n            return Response({\n                \"status\": status.HTTP_401_UNAUTHORIZED,\n                \"message\": \"Access denied!\",\n            })\n\n        if 'html_file' not in request.data:\n            return Response({\n                \"status\": status.HTTP_400_BAD_REQUEST,\n                \"message\": \"You should provide an html file to convert!\",\n            })\n\n        html_file = request.data.get('html_file')\n        file = File.objects.create(html_file=html_file, uploaded_at=datetime.now())\n\n        convert_html_file.delay(file.file_id)\n\n        return Response({\n            \"status\": status.HTTP_200_OK,\n            \"message\": \"We are converting your file! Wait a moment!\",\n        })\n</code></pre>"},{"location":"reference/backend/api/converter/views/#backend.api.converter.views.HtmlConvertAPI.post","title":"<code>post(request)</code>","text":"<p>Perform HTML to PDF conversion and return a response.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>HTTP request containing the HTML file to convert.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response with status code and message.</p> Source code in <code>backend/api/converter/views.py</code> <pre><code>def post(self, request: Request) -&gt; Response:\n\"\"\"Perform HTML to PDF conversion and return a response.\n\n    Args:\n        request: HTTP request containing the HTML file to convert.\n\n    Returns:\n        Response with status code and message.\n    \"\"\"\n    if not request.user:\n        return Response({\n            \"status\": status.HTTP_401_UNAUTHORIZED,\n            \"message\": \"Access denied!\",\n        })\n\n    if 'html_file' not in request.data:\n        return Response({\n            \"status\": status.HTTP_400_BAD_REQUEST,\n            \"message\": \"You should provide an html file to convert!\",\n        })\n\n    html_file = request.data.get('html_file')\n    file = File.objects.create(html_file=html_file, uploaded_at=datetime.now())\n\n    convert_html_file.delay(file.file_id)\n\n    return Response({\n        \"status\": status.HTTP_200_OK,\n        \"message\": \"We are converting your file! Wait a moment!\",\n    })\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/","title":"document_converter","text":"<p>This package contains classes of the document converter.</p> Sub-packages <ul> <li><code>document</code>: A package that contains classes for documents produced by the converter.</li> <li><code>converter</code>: A package that contains classes for converting documents.</li> </ul>"},{"location":"reference/backend/api/converter/document_converter/converter/","title":"converter","text":"<p>This package contains classes of the converters that convert documents.</p> Modules <ul> <li><code>converter</code>: A module that contain converter interface.</li> <li><code>html_converter</code>: A module that contain the HTML converter.</li> </ul>"},{"location":"reference/backend/api/converter/document_converter/converter/converter/","title":"converter","text":"<p>This module contains class for the converter.</p> Classes <ul> <li><code>Converter</code>: An interface for the converter object.</li> </ul>"},{"location":"reference/backend/api/converter/document_converter/converter/converter/#backend.api.converter.document_converter.converter.converter.Converter","title":"<code>Converter</code>","text":"<p>         Bases: <code>ABC</code></p> <p>Abstract class for the converter.</p> Methods <ul> <li><code>convert()</code>: A method for converting documents.</li> <li><code>_create_document()</code>: A protected abstract method for creating documents.</li> </ul> Source code in <code>backend/api/converter/document_converter/converter/converter.py</code> <pre><code>class Converter(ABC):\n\"\"\"\n    Abstract class for the converter.\n\n    Methods:\n        - `convert()`: A method for converting documents.\n        - `_create_document()`: A protected abstract method for creating documents.\n    \"\"\"\n\n    def convert(self, file: str, output: str) -&gt; Document:\n\"\"\"Create a document and convert it.\n\n        Args:\n            file: The file to be converted.\n            output: The output path of the converted file.\n\n        Returns:\n            A document object.\n        \"\"\"\n        document: Document = self.create_document(file, output)\n        document.convert_file()\n        return document\n\n    @abstractmethod\n    def create_document(self, file: str, output: str) -&gt; Document:\n\"\"\"Create a document object given a file and output path.\n\n        Args:\n            file: The path to the file to be converted.\n            output: The desired path of the converted file.\n\n        Returns:\n            A document object.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/converter/converter/#backend.api.converter.document_converter.converter.converter.Converter.convert","title":"<code>convert(file, output)</code>","text":"<p>Create a document and convert it.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>The file to be converted.</p> required <code>output</code> <code>str</code> <p>The output path of the converted file.</p> required <p>Returns:</p> Type Description <code>Document</code> <p>A document object.</p> Source code in <code>backend/api/converter/document_converter/converter/converter.py</code> <pre><code>def convert(self, file: str, output: str) -&gt; Document:\n\"\"\"Create a document and convert it.\n\n    Args:\n        file: The file to be converted.\n        output: The output path of the converted file.\n\n    Returns:\n        A document object.\n    \"\"\"\n    document: Document = self.create_document(file, output)\n    document.convert_file()\n    return document\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/converter/converter/#backend.api.converter.document_converter.converter.converter.Converter.create_document","title":"<code>create_document(file, output)</code>  <code>abstractmethod</code>","text":"<p>Create a document object given a file and output path.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>The path to the file to be converted.</p> required <code>output</code> <code>str</code> <p>The desired path of the converted file.</p> required <p>Returns:</p> Type Description <code>Document</code> <p>A document object.</p> Source code in <code>backend/api/converter/document_converter/converter/converter.py</code> <pre><code>@abstractmethod\ndef create_document(self, file: str, output: str) -&gt; Document:\n\"\"\"Create a document object given a file and output path.\n\n    Args:\n        file: The path to the file to be converted.\n        output: The desired path of the converted file.\n\n    Returns:\n        A document object.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/converter/html_converter/","title":"html_converter","text":"<p>This module contains class for the html converter.</p> Classes <ul> <li><code>HtmlConverter</code>: A class that convert html files.</li> </ul>"},{"location":"reference/backend/api/converter/document_converter/converter/html_converter/#backend.api.converter.document_converter.converter.html_converter.HtmlConverter","title":"<code>HtmlConverter</code>","text":"<p>         Bases: <code>Converter</code></p> <p>A concrete class inheriting from Converter and used to convert HTML files to PDF files.</p> Methods <ul> <li><code>_create_document()</code>: A protected method for creating documents.</li> </ul> Source code in <code>backend/api/converter/document_converter/converter/html_converter.py</code> <pre><code>class HtmlConverter(Converter):\n\"\"\"\n    A concrete class inheriting from Converter and used to convert HTML files to PDF files.\n\n    Methods:\n        - `_create_document()`: A protected method for creating documents.\n    \"\"\"\n\n    def create_document(self, file: str, output: str) -&gt; Document:\n\"\"\"Create a PdfDocument object.\n\n        Args:\n            file: The path to the HTML file to be converted.\n            output: The path where the output PDF file should be saved.\n\n        Returns:\n            A document object.\n        \"\"\"\n        return PdfDocument(file, output)\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/converter/html_converter/#backend.api.converter.document_converter.converter.html_converter.HtmlConverter.create_document","title":"<code>create_document(file, output)</code>","text":"<p>Create a PdfDocument object.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>The path to the HTML file to be converted.</p> required <code>output</code> <code>str</code> <p>The path where the output PDF file should be saved.</p> required <p>Returns:</p> Type Description <code>Document</code> <p>A document object.</p> Source code in <code>backend/api/converter/document_converter/converter/html_converter.py</code> <pre><code>def create_document(self, file: str, output: str) -&gt; Document:\n\"\"\"Create a PdfDocument object.\n\n    Args:\n        file: The path to the HTML file to be converted.\n        output: The path where the output PDF file should be saved.\n\n    Returns:\n        A document object.\n    \"\"\"\n    return PdfDocument(file, output)\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/document/","title":"document","text":"<p>This package contains classes of documents produced by the converter.</p> Modules <ul> <li><code>document</code>: A module that contains the document interface.</li> <li><code>pdf_document</code>: A module that contain the PDF document.</li> </ul>"},{"location":"reference/backend/api/converter/document_converter/document/document/","title":"document","text":"<p>This module contains class for the document.</p> Classes <ul> <li><code>Document</code>: An interface for the document object.</li> </ul>"},{"location":"reference/backend/api/converter/document_converter/document/document/#backend.api.converter.document_converter.document.document.Document","title":"<code>Document</code>","text":"<p>         Bases: <code>ABC</code></p> <p>Abstract base class for the document.</p> <p>Attributes:</p> Name Type Description <code>_file</code> <code>str</code> <p>The file source to be converted.</p> <code>_output</code> <code>str</code> <p>The output path of the converted file.</p> Methods <ul> <li><code>convert_file()</code>: Abstract method for converting file.</li> </ul> Source code in <code>backend/api/converter/document_converter/document/document.py</code> <pre><code>class Document(ABC):\n\"\"\"\n    Abstract base class for the document.\n\n    Attributes:\n        _file: The file source to be converted.\n        _output: The output path of the converted file.\n\n    Methods:\n        - `convert_file()`: Abstract method for converting file.\n    \"\"\"\n\n    def __init__(self, file: str, output: str) -&gt; None:\n\"\"\"Initialize the Document object.\n\n        Args:\n            file: A string representing the path of the file to be converted.\n            output: A string representing the path of output file.\n        \"\"\"\n        self._file: str = file\n        self._output: str = output\n\n    @abstractmethod\n    def convert_file(self) -&gt; None:\n\"\"\"Abstract method that converts the file to the desired output format.\"\"\"\n        pass\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/document/document/#backend.api.converter.document_converter.document.document.Document.__init__","title":"<code>__init__(file, output)</code>","text":"<p>Initialize the Document object.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>A string representing the path of the file to be converted.</p> required <code>output</code> <code>str</code> <p>A string representing the path of output file.</p> required Source code in <code>backend/api/converter/document_converter/document/document.py</code> <pre><code>def __init__(self, file: str, output: str) -&gt; None:\n\"\"\"Initialize the Document object.\n\n    Args:\n        file: A string representing the path of the file to be converted.\n        output: A string representing the path of output file.\n    \"\"\"\n    self._file: str = file\n    self._output: str = output\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/document/document/#backend.api.converter.document_converter.document.document.Document.convert_file","title":"<code>convert_file()</code>  <code>abstractmethod</code>","text":"<p>Abstract method that converts the file to the desired output format.</p> Source code in <code>backend/api/converter/document_converter/document/document.py</code> <pre><code>@abstractmethod\ndef convert_file(self) -&gt; None:\n\"\"\"Abstract method that converts the file to the desired output format.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/document/pdf_document/","title":"pdf_document","text":"<p>This module contains class for the PDF document.</p> Classes <ul> <li><code>PdfDocument</code>: A class representing a PDF document.</li> </ul>"},{"location":"reference/backend/api/converter/document_converter/document/pdf_document/#backend.api.converter.document_converter.document.pdf_document.PdfDocument","title":"<code>PdfDocument</code>","text":"<p>         Bases: <code>Document</code></p> <p>A class representing a PDF document.</p> Methods <ul> <li><code>convert_file()</code>: A method for converting file.</li> </ul> Source code in <code>backend/api/converter/document_converter/document/pdf_document.py</code> <pre><code>class PdfDocument(Document):\n\"\"\"\n    A class representing a PDF document.\n\n    Methods:\n        - `convert_file()`: A method for converting file.\n    \"\"\"\n\n    def __init__(self, file: str, output: str) -&gt; None:\n\"\"\"Initialize the PdfDocument object.\n\n        Args:\n            file: A string representing the path of the file to be converted.\n            output: A string representing the path of output file.\n        \"\"\"\n        super().__init__(file, output)\n\n    def convert_file(self) -&gt; None:\n\"\"\"Convert a html file to a PDF file using the pdfkit library.\"\"\"\n        options = {'encoding': 'UTF-8'}\n        pdfkit.from_file(self._file, self._output, options=options)\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/document/pdf_document/#backend.api.converter.document_converter.document.pdf_document.PdfDocument.__init__","title":"<code>__init__(file, output)</code>","text":"<p>Initialize the PdfDocument object.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>A string representing the path of the file to be converted.</p> required <code>output</code> <code>str</code> <p>A string representing the path of output file.</p> required Source code in <code>backend/api/converter/document_converter/document/pdf_document.py</code> <pre><code>def __init__(self, file: str, output: str) -&gt; None:\n\"\"\"Initialize the PdfDocument object.\n\n    Args:\n        file: A string representing the path of the file to be converted.\n        output: A string representing the path of output file.\n    \"\"\"\n    super().__init__(file, output)\n</code></pre>"},{"location":"reference/backend/api/converter/document_converter/document/pdf_document/#backend.api.converter.document_converter.document.pdf_document.PdfDocument.convert_file","title":"<code>convert_file()</code>","text":"<p>Convert a html file to a PDF file using the pdfkit library.</p> Source code in <code>backend/api/converter/document_converter/document/pdf_document.py</code> <pre><code>def convert_file(self) -&gt; None:\n\"\"\"Convert a html file to a PDF file using the pdfkit library.\"\"\"\n    options = {'encoding': 'UTF-8'}\n    pdfkit.from_file(self._file, self._output, options=options)\n</code></pre>"},{"location":"reference/backend/api/files/","title":"files","text":"<p>This package contains the files endpoints.</p> Modules <ul> <li><code>models</code>:     A module that contains models of files package.</li> <li><code>serializers</code>:     A module that contains serializers of files package.</li> <li><code>storage</code>:     A module that contains class for overriding files.</li> <li><code>urls</code>:     A module that contains urls of files package.</li> <li><code>views</code>:     A module that contains files views.</li> </ul>"},{"location":"reference/backend/api/files/models/","title":"models","text":"<p>A module that contains models of the files package.</p> Classes <ul> <li><code>File</code>: A class that creating the file model.</li> </ul>"},{"location":"reference/backend/api/files/models/#backend.api.files.models.File","title":"<code>File</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>A model representing an uploaded file and its converted version.</p> <p>Attributes:</p> Name Type Description <code>file_id</code> <code>models.UUIDField</code> <p>The id of the file</p> <code>html_file</code> <code>models.FileField</code> <p>The html file that uploaded for conversion</p> <code>pdf_file</code> <code>models.FileField</code> <p>The pdf file path that converted</p> <code>uploaded_at</code> <code>models.DateTimeField</code> <p>The datetime when uploading the file</p> <code>converted_at</code> <code>models.DateTimeField</code> <p>The datetime when converting the file</p> <code>created_at</code> <code>models.DateTimeField</code> <p>The datetime when the file is created</p> <code>updated_at</code> <code>models.DateTimeField</code> <p>The updated datatime when updating the file</p> Source code in <code>backend/api/files/models.py</code> <pre><code>class File(models.Model):\n\"\"\"A model representing an uploaded file and its converted version.\n\n    Attributes:\n        file_id: The id of the file\n        html_file: The html file that uploaded for conversion\n        pdf_file: The pdf file path that converted\n        uploaded_at: The datetime when uploading the file\n        converted_at: The datetime when converting the file\n        created_at: The datetime when the file is created\n        updated_at: The updated datatime when updating the file\n    \"\"\"\n\n    class Meta:\n\"\"\"Metaclass for File model.\n\n        Attributes:\n            db_table: the table name\n        \"\"\"\n\n        db_table: str = \"api_files\"\n\n    file_id: models.UUIDField = models.UUIDField(primary_key=True, default=uuid4, editable=False, db_index=True)\n\n    html_file: models.FileField = models.FileField(upload_to=\"html_files/\", max_length=255, storage=OverwriteStorage(), null=True)\n    pdf_file: models.FileField = models.FileField(upload_to=\"pdf_files/\", max_length=255, storage=OverwriteStorage(), null=True)\n\n    uploaded_at: models.DateTimeField = models.DateTimeField(max_length=255, null=True)\n    converted_at: models.DateTimeField = models.DateTimeField(max_length=255, null=True)\n\n    created_at: models.DateTimeField = models.DateTimeField(auto_now_add=True)\n    updated_at: models.DateTimeField = models.DateTimeField(auto_now=True, null=True)\n</code></pre>"},{"location":"reference/backend/api/files/models/#backend.api.files.models.File.Meta","title":"<code>Meta</code>","text":"<p>Metaclass for File model.</p> <p>Attributes:</p> Name Type Description <code>db_table</code> <code>str</code> <p>the table name</p> Source code in <code>backend/api/files/models.py</code> <pre><code>class Meta:\n\"\"\"Metaclass for File model.\n\n    Attributes:\n        db_table: the table name\n    \"\"\"\n\n    db_table: str = \"api_files\"\n</code></pre>"},{"location":"reference/backend/api/files/serializers/","title":"serializers","text":"<p>A module that contains serializers of the files package.</p> Classes <ul> <li><code>FileSerializer</code>: A class that serializer the File model.</li> </ul>"},{"location":"reference/backend/api/files/serializers/#backend.api.files.serializers.FileSerializer","title":"<code>FileSerializer</code>","text":"<p>         Bases: <code>ModelSerializer</code></p> <p>Serializer for the File model.</p> <p>Attributes:</p> Name Type Description <code>html_file</code> <code>SerializerMethodField</code> <p>The html file path</p> <code>pdf_file</code> <code>SerializerMethodField</code> <p>The pdf file path</p> Methods <ul> <li><code>get_html_file(file)</code>: A method to get the html file url</li> <li><code>get_pdf_file(file)</code>: A method to get the pdf file url</li> </ul> Source code in <code>backend/api/files/serializers.py</code> <pre><code>class FileSerializer(ModelSerializer):\n\"\"\"Serializer for the File model.\n\n    Attributes:\n        html_file: The html file path\n        pdf_file: The pdf file path\n\n    Methods:\n        - `get_html_file(file)`: A method to get the html file url\n        - `get_pdf_file(file)`: A method to get the pdf file url\n    \"\"\"\n\n    html_file: SerializerMethodField = SerializerMethodField()\n    pdf_file: SerializerMethodField = SerializerMethodField()\n\n    class Meta:\n\"\"\"Metaclass for FileSerializer.\n\n        Attributes:\n            model: The File model\n            fields: A list of File fields that need to be serialized\n        \"\"\"\n\n        model = File\n        fields = [\n            \"file_id\",\n            \"html_file\",\n            \"pdf_file\",\n            \"uploaded_at\",\n            \"converted_at\",\n            \"created_at\",\n            \"updated_at\"\n        ]\n\n    def get_html_file(self, file: File) -&gt; str:\n\"\"\"Get the URL for a File object's html_file field as a hyperlink.\n\n        Args:\n            file: A File object.\n\n        Returns:\n            The URL for the File object's html_file field as a hyperlink.\n        \"\"\"\n        request = self.context.get('request')\n        html_file = file.html_file.name.replace('backend/', '')\n        return request.build_absolute_uri(html_file)\n\n    def get_pdf_file(self, file: File) -&gt; str:\n\"\"\"Get the URL for a File object's pdf_file field as a hyperlink.\n\n        Args:\n            file: A File object.\n\n        Returns:\n            The URL for the File object's pdf_file field as a hyperlink.\n        \"\"\"\n        request = self.context.get('request')\n        pdf_file = file.pdf_file.name.replace('backend/', '')\n        return request.build_absolute_uri(pdf_file)\n</code></pre>"},{"location":"reference/backend/api/files/serializers/#backend.api.files.serializers.FileSerializer.Meta","title":"<code>Meta</code>","text":"<p>Metaclass for FileSerializer.</p> <p>Attributes:</p> Name Type Description <code>model</code> <p>The File model</p> <code>fields</code> <p>A list of File fields that need to be serialized</p> Source code in <code>backend/api/files/serializers.py</code> <pre><code>class Meta:\n\"\"\"Metaclass for FileSerializer.\n\n    Attributes:\n        model: The File model\n        fields: A list of File fields that need to be serialized\n    \"\"\"\n\n    model = File\n    fields = [\n        \"file_id\",\n        \"html_file\",\n        \"pdf_file\",\n        \"uploaded_at\",\n        \"converted_at\",\n        \"created_at\",\n        \"updated_at\"\n    ]\n</code></pre>"},{"location":"reference/backend/api/files/serializers/#backend.api.files.serializers.FileSerializer.get_html_file","title":"<code>get_html_file(file)</code>","text":"<p>Get the URL for a File object's html_file field as a hyperlink.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File</code> <p>A File object.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The URL for the File object's html_file field as a hyperlink.</p> Source code in <code>backend/api/files/serializers.py</code> <pre><code>def get_html_file(self, file: File) -&gt; str:\n\"\"\"Get the URL for a File object's html_file field as a hyperlink.\n\n    Args:\n        file: A File object.\n\n    Returns:\n        The URL for the File object's html_file field as a hyperlink.\n    \"\"\"\n    request = self.context.get('request')\n    html_file = file.html_file.name.replace('backend/', '')\n    return request.build_absolute_uri(html_file)\n</code></pre>"},{"location":"reference/backend/api/files/serializers/#backend.api.files.serializers.FileSerializer.get_pdf_file","title":"<code>get_pdf_file(file)</code>","text":"<p>Get the URL for a File object's pdf_file field as a hyperlink.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>File</code> <p>A File object.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The URL for the File object's pdf_file field as a hyperlink.</p> Source code in <code>backend/api/files/serializers.py</code> <pre><code>def get_pdf_file(self, file: File) -&gt; str:\n\"\"\"Get the URL for a File object's pdf_file field as a hyperlink.\n\n    Args:\n        file: A File object.\n\n    Returns:\n        The URL for the File object's pdf_file field as a hyperlink.\n    \"\"\"\n    request = self.context.get('request')\n    pdf_file = file.pdf_file.name.replace('backend/', '')\n    return request.build_absolute_uri(pdf_file)\n</code></pre>"},{"location":"reference/backend/api/files/storage/","title":"storage","text":"<p>A module that handle overriding files names.</p> Classes <ul> <li><code>OverwriteStorage</code>: A class that handle overriding files names</li> </ul>"},{"location":"reference/backend/api/files/storage/#backend.api.files.storage.OverwriteStorage","title":"<code>OverwriteStorage</code>","text":"<p>         Bases: <code>FileSystemStorage</code></p> <p>Overrides the default storage system to allow overwriting of existing files.</p> <p>This class inherits from Django's FileSystemStorage class and overrides the <code>get_available_name</code> method to check if a file with the same name already exists. If so, it deletes the old file before returning the name, allowing the new file to overwrite the old one.</p> Methods <ul> <li><code>get_available_name(name, max_length)</code>: A method to get file name and override it</li> </ul> Source code in <code>backend/api/files/storage.py</code> <pre><code>class OverwriteStorage(FileSystemStorage):\n\"\"\"Overrides the default storage system to allow overwriting of existing files.\n\n    This class inherits from Django's FileSystemStorage class and overrides the `get_available_name`\n    method to check if a file with the same name already exists. If so, it deletes the old file before\n    returning the name, allowing the new file to overwrite the old one.\n\n    Methods:\n        - `get_available_name(name, max_length)`: A method to get file name and override it\n    \"\"\"\n\n    def get_available_name(self, name: str, max_length: Optional[int, None] = None) -&gt; str:\n\"\"\"Return a filename that's available for new content to be written to.\n\n        If the file already exists, it is deleted to allow overwriting.\n\n        Args:\n            name: The desired filename.\n            max_length: The maximum length of the filename. Defaults to None.\n\n        Returns:\n            The new filename that's available for use.\n        \"\"\"\n        if self.exists(name):\n            os.remove(os.path.join(settings.MEDIA_ROOT, name))\n        return name\n</code></pre>"},{"location":"reference/backend/api/files/storage/#backend.api.files.storage.OverwriteStorage.get_available_name","title":"<code>get_available_name(name, max_length=None)</code>","text":"<p>Return a filename that's available for new content to be written to.</p> <p>If the file already exists, it is deleted to allow overwriting.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The desired filename.</p> required <code>max_length</code> <code>Optional[int, None]</code> <p>The maximum length of the filename. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The new filename that's available for use.</p> Source code in <code>backend/api/files/storage.py</code> <pre><code>def get_available_name(self, name: str, max_length: Optional[int, None] = None) -&gt; str:\n\"\"\"Return a filename that's available for new content to be written to.\n\n    If the file already exists, it is deleted to allow overwriting.\n\n    Args:\n        name: The desired filename.\n        max_length: The maximum length of the filename. Defaults to None.\n\n    Returns:\n        The new filename that's available for use.\n    \"\"\"\n    if self.exists(name):\n        os.remove(os.path.join(settings.MEDIA_ROOT, name))\n    return name\n</code></pre>"},{"location":"reference/backend/api/files/urls/","title":"urls","text":"<p>This module defines the urls of the files views.</p> Variables <ul> <li>urlpatterns: A list of url patterns of files views.</li> </ul>"},{"location":"reference/backend/api/files/views/","title":"views","text":"<p>This module contains the views of the files package.</p> Classes <ul> <li><code>FilesAPI</code>: A class that handles the files endpoints</li> <li><code>FileAPI</code>: A class that handle the file details</li> </ul>"},{"location":"reference/backend/api/files/views/#backend.api.files.views.FileDetailAPI","title":"<code>FileDetailAPI</code>","text":"<p>         Bases: <code>views.APIView</code></p> <p>View for fetching and deleting individual files.</p> <p>Attributes:</p> Name Type Description <code>`authentication_classes`</code> <p>List of authentication classes. Default is JWTAuthentication.</p> Methods <ul> <li><code>get(request)</code>: Handles GET requests to get a file.</li> <li><code>delete(request)</code>: Handles DELETE requests to delete a file.</li> </ul> Source code in <code>backend/api/files/views.py</code> <pre><code>class FileDetailAPI(views.APIView):\n\"\"\"View for fetching and deleting individual files.\n\n    Attributes:\n        `authentication_classes`: List of authentication classes. Default is JWTAuthentication.\n\n    Methods:\n        - `get(request)`: Handles GET requests to get a file.\n        - `delete(request)`: Handles DELETE requests to delete a file.\n    \"\"\"\n\n    authentication_classes = [JWTAuthentication]\n\n    def get(self, request: Request, file_id: str) -&gt; Response:\n\"\"\"Get the details of a file.\n\n        Args:\n            request: The HTTP request object.\n            file_id: The ID of the file to fetch.\n\n        Returns:\n            The response containing the file details.\n        \"\"\"\n        if not request.user:\n            return Response({\n                \"status\": status.HTTP_401_UNAUTHORIZED,\n                \"message\": \"Access denied!\",\n            })\n\n        file = File.objects.filter(file_id=file_id).first()\n\n        if not file:\n            return Response({\n                \"status\": status.HTTP_404_NOT_FOUND,\n                \"message\": \"File not found\",\n            })\n\n        return Response({\n            \"status\": status.HTTP_200_OK,\n            \"message\": \"File fetched successfully\",\n            \"file\": FileSerializer(file, context={\"request\": request}).data,\n        })\n\n    def delete(self, request: Request, file_id: str) -&gt; Response:\n\"\"\"Delete a file.\n\n        Args:\n            request: HTTP request\n            file_id: The ID of the file to delete.\n\n        Returns:\n            The response indicating whether the file was successfully deleted.\n        \"\"\"\n        if not request.user:\n            return Response({\n                \"status\": status.HTTP_401_UNAUTHORIZED,\n                \"message\": \"Access denied!\",\n            })\n\n        file = File.objects.filter(file_id=file_id).first()\n\n        if not file:\n            return Response({\n                \"status\": status.HTTP_404_NOT_FOUND,\n                \"message\": \"File not found\",\n            })\n\n        file.delete()\n\n        return Response({\n            \"status\": status.HTTP_200_OK,\n            \"message\": \"File deleted successfully\",\n        })\n</code></pre>"},{"location":"reference/backend/api/files/views/#backend.api.files.views.FileDetailAPI.delete","title":"<code>delete(request, file_id)</code>","text":"<p>Delete a file.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>HTTP request</p> required <code>file_id</code> <code>str</code> <p>The ID of the file to delete.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The response indicating whether the file was successfully deleted.</p> Source code in <code>backend/api/files/views.py</code> <pre><code>def delete(self, request: Request, file_id: str) -&gt; Response:\n\"\"\"Delete a file.\n\n    Args:\n        request: HTTP request\n        file_id: The ID of the file to delete.\n\n    Returns:\n        The response indicating whether the file was successfully deleted.\n    \"\"\"\n    if not request.user:\n        return Response({\n            \"status\": status.HTTP_401_UNAUTHORIZED,\n            \"message\": \"Access denied!\",\n        })\n\n    file = File.objects.filter(file_id=file_id).first()\n\n    if not file:\n        return Response({\n            \"status\": status.HTTP_404_NOT_FOUND,\n            \"message\": \"File not found\",\n        })\n\n    file.delete()\n\n    return Response({\n        \"status\": status.HTTP_200_OK,\n        \"message\": \"File deleted successfully\",\n    })\n</code></pre>"},{"location":"reference/backend/api/files/views/#backend.api.files.views.FileDetailAPI.get","title":"<code>get(request, file_id)</code>","text":"<p>Get the details of a file.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The HTTP request object.</p> required <code>file_id</code> <code>str</code> <p>The ID of the file to fetch.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The response containing the file details.</p> Source code in <code>backend/api/files/views.py</code> <pre><code>def get(self, request: Request, file_id: str) -&gt; Response:\n\"\"\"Get the details of a file.\n\n    Args:\n        request: The HTTP request object.\n        file_id: The ID of the file to fetch.\n\n    Returns:\n        The response containing the file details.\n    \"\"\"\n    if not request.user:\n        return Response({\n            \"status\": status.HTTP_401_UNAUTHORIZED,\n            \"message\": \"Access denied!\",\n        })\n\n    file = File.objects.filter(file_id=file_id).first()\n\n    if not file:\n        return Response({\n            \"status\": status.HTTP_404_NOT_FOUND,\n            \"message\": \"File not found\",\n        })\n\n    return Response({\n        \"status\": status.HTTP_200_OK,\n        \"message\": \"File fetched successfully\",\n        \"file\": FileSerializer(file, context={\"request\": request}).data,\n    })\n</code></pre>"},{"location":"reference/backend/api/files/views/#backend.api.files.views.FileListAPI","title":"<code>FileListAPI</code>","text":"<p>         Bases: <code>views.APIView</code></p> <p>API endpoint for managing files.</p> <p>Attributes:</p> Name Type Description <code>`authentication_classes`</code> <p>List of authentication classes. Default is JWTAuthentication.</p> Methods <ul> <li><code>get(request)</code>: Handles GET requests to get list of files.</li> <li><code>delete(request)</code>: Handles DELETE requests to delete all files.</li> </ul> Source code in <code>backend/api/files/views.py</code> <pre><code>class FileListAPI(views.APIView):\n\"\"\"API endpoint for managing files.\n\n    Attributes:\n        `authentication_classes`: List of authentication classes. Default is JWTAuthentication.\n\n    Methods:\n        - `get(request)`: Handles GET requests to get list of files.\n        - `delete(request)`: Handles DELETE requests to delete all files.\n    \"\"\"\n\n    authentication_classes = [JWTAuthentication]\n\n    def get(self, request: Request) -&gt; Response:\n\"\"\"Retrieve a list of all files.\n\n        Args:\n            request: HTTP request object.\n\n        Returns:\n            HTTP response containing a list of all files.\n        \"\"\"\n        if not request.user:\n            return Response({\n                \"status\": status.HTTP_401_UNAUTHORIZED,\n                \"message\": \"Access denied!\",\n            })\n\n        files = File.objects.all()\n\n        return Response({\n            \"status\": status.HTTP_200_OK,\n            \"message\": \"Files fetched successfully\",\n            \"file\": FileSerializer(files, many=True, context={\"request\": request}).data,\n        })\n\n    def delete(self, request: Request) -&gt; Response:\n\"\"\"Delete all files.\n\n        Args:\n            request: HTTP request object.\n\n        Returns:\n            HTTP response with message ans status code.\n        \"\"\"\n        if not request.user:\n            return Response({\n                \"status\": status.HTTP_401_UNAUTHORIZED,\n                \"message\": \"Access denied!\",\n            })\n\n        File.objects.all().delete()\n\n        return Response({\n            \"status\": status.HTTP_200_OK,\n            \"message\": \"All files deleted successfully\",\n        })\n</code></pre>"},{"location":"reference/backend/api/files/views/#backend.api.files.views.FileListAPI.delete","title":"<code>delete(request)</code>","text":"<p>Delete all files.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>HTTP request object.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>HTTP response with message ans status code.</p> Source code in <code>backend/api/files/views.py</code> <pre><code>def delete(self, request: Request) -&gt; Response:\n\"\"\"Delete all files.\n\n    Args:\n        request: HTTP request object.\n\n    Returns:\n        HTTP response with message ans status code.\n    \"\"\"\n    if not request.user:\n        return Response({\n            \"status\": status.HTTP_401_UNAUTHORIZED,\n            \"message\": \"Access denied!\",\n        })\n\n    File.objects.all().delete()\n\n    return Response({\n        \"status\": status.HTTP_200_OK,\n        \"message\": \"All files deleted successfully\",\n    })\n</code></pre>"},{"location":"reference/backend/api/files/views/#backend.api.files.views.FileListAPI.get","title":"<code>get(request)</code>","text":"<p>Retrieve a list of all files.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>HTTP request object.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>HTTP response containing a list of all files.</p> Source code in <code>backend/api/files/views.py</code> <pre><code>def get(self, request: Request) -&gt; Response:\n\"\"\"Retrieve a list of all files.\n\n    Args:\n        request: HTTP request object.\n\n    Returns:\n        HTTP response containing a list of all files.\n    \"\"\"\n    if not request.user:\n        return Response({\n            \"status\": status.HTTP_401_UNAUTHORIZED,\n            \"message\": \"Access denied!\",\n        })\n\n    files = File.objects.all()\n\n    return Response({\n        \"status\": status.HTTP_200_OK,\n        \"message\": \"Files fetched successfully\",\n        \"file\": FileSerializer(files, many=True, context={\"request\": request}).data,\n    })\n</code></pre>"},{"location":"reference/backend/api/users/","title":"users","text":"<p>This package contains the users endpoints.</p> Modules <ul> <li><code>jwt_auth</code>:     A handler that handle custom JWT auth.</li> <li><code>models</code>:     A module that contains models of users package.</li> <li><code>serializers</code>:     A module that contains serializers of users package.</li> <li><code>urls</code>:     A module that contains urls of users package.</li> <li><code>views</code>:     A module that contains users views.</li> </ul>"},{"location":"reference/backend/api/users/jwt_auth/","title":"jwt_auth","text":"<p>A module that contains the custom JWT Auth.</p> Classes <ul> <li><code>JWTAuthentication</code>:     A class that handle custom JWT Auth.</li> </ul> Functions <ul> <li><code>generate_token(email, key)</code>:  A function that generate JWT token.</li> <li><code>verify_token(token, key)</code>:  A function that verify JWT token.</li> </ul>"},{"location":"reference/backend/api/users/jwt_auth/#backend.api.users.jwt_auth.JWTAuthentication","title":"<code>JWTAuthentication</code>","text":"<p>         Bases: <code>authentication.BaseAuthentication</code></p> <p>Custom JWT Authentication Class.</p> Methods <ul> <li>authenticate(request):     A function that handle JWT authentication.</li> </ul> Source code in <code>backend/api/users/jwt_auth.py</code> <pre><code>class JWTAuthentication(authentication.BaseAuthentication):\n\"\"\"Custom JWT Authentication Class.\n\n    Methods:\n        - authenticate(request):\n            A function that handle JWT authentication.\n    \"\"\"\n\n    def authenticate(self, request: Request) -&gt; (AuthUser, None):\n\"\"\"Authenticate user based on JWT token in request header.\n\n        Args:\n            request: The HTTP request object.\n\n        Raises:\n            AuthenticationFailed: If the JWT token is invalid or not present in the request header.\n\n        Returns:\n            A tuple of (user, None) if authentication succeeds, or None if it fails.\n        \"\"\"\n        token = request.headers.get('Authorization')\n        if token:\n            try:\n                payload = verify_token(token, settings.SECRET_KEY)\n                from .models import AuthUser\n                user = AuthUser.objects.filter(email=payload[\"email\"]).first()\n            except jwt.InvalidTokenError:\n                raise exceptions.AuthenticationFailed('Invalid token')\n        else:\n            raise exceptions.AuthenticationFailed('Token required')\n\n        return user, None\n</code></pre>"},{"location":"reference/backend/api/users/jwt_auth/#backend.api.users.jwt_auth.JWTAuthentication.authenticate","title":"<code>authenticate(request)</code>","text":"<p>Authenticate user based on JWT token in request header.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The HTTP request object.</p> required <p>Raises:</p> Type Description <code>AuthenticationFailed</code> <p>If the JWT token is invalid or not present in the request header.</p> <p>Returns:</p> Type Description <code>AuthUser, None</code> <p>A tuple of (user, None) if authentication succeeds, or None if it fails.</p> Source code in <code>backend/api/users/jwt_auth.py</code> <pre><code>def authenticate(self, request: Request) -&gt; (AuthUser, None):\n\"\"\"Authenticate user based on JWT token in request header.\n\n    Args:\n        request: The HTTP request object.\n\n    Raises:\n        AuthenticationFailed: If the JWT token is invalid or not present in the request header.\n\n    Returns:\n        A tuple of (user, None) if authentication succeeds, or None if it fails.\n    \"\"\"\n    token = request.headers.get('Authorization')\n    if token:\n        try:\n            payload = verify_token(token, settings.SECRET_KEY)\n            from .models import AuthUser\n            user = AuthUser.objects.filter(email=payload[\"email\"]).first()\n        except jwt.InvalidTokenError:\n            raise exceptions.AuthenticationFailed('Invalid token')\n    else:\n        raise exceptions.AuthenticationFailed('Token required')\n\n    return user, None\n</code></pre>"},{"location":"reference/backend/api/users/jwt_auth/#backend.api.users.jwt_auth.generate_token","title":"<code>generate_token(email, key)</code>","text":"<p>Generate a JSON Web Token (JWT) using the provided email and key.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The email address to include in the token's payload.</p> required <code>key</code> <code>str</code> <p>The key to use for encoding the token.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representation of the generated token.</p> Source code in <code>backend/api/users/jwt_auth.py</code> <pre><code>def generate_token(email: str, key: str) -&gt; str:\n\"\"\"Generate a JSON Web Token (JWT) using the provided email and key.\n\n    Args:\n        email: The email address to include in the token's payload.\n        key: The key to use for encoding the token.\n\n    Returns:\n        A string representation of the generated token.\n    \"\"\"\n    token = jwt.encode(\n        payload={\"email\": email},\n        key=key,\n        algorithm=\"HS256\"\n    )\n    return token\n</code></pre>"},{"location":"reference/backend/api/users/jwt_auth/#backend.api.users.jwt_auth.verify_token","title":"<code>verify_token(token, key)</code>","text":"<p>Verify a JSON Web Token (JWT) using the provided key.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The JWT to verify.</p> required <code>key</code> <code>str</code> <p>The key to use for verifying the JWT.</p> required <p>Raises:</p> Type Description <code>jwt.InvalidTokenError</code> <p>If the token cannot be verified or decoded.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary representation of the decoded payload.</p> Source code in <code>backend/api/users/jwt_auth.py</code> <pre><code>def verify_token(token: str, key: str) -&gt; dict:\n\"\"\"Verify a JSON Web Token (JWT) using the provided key.\n\n    Args:\n        token: The JWT to verify.\n        key: The key to use for verifying the JWT.\n\n    Raises:\n        jwt.InvalidTokenError: If the token cannot be verified or decoded.\n\n    Returns:\n        A dictionary representation of the decoded payload.\n    \"\"\"\n    payload = jwt.decode(\n        jwt=token,\n        key=key,\n        algorithms=[\"HS256\"]\n    )\n    return payload\n</code></pre>"},{"location":"reference/backend/api/users/models/","title":"models","text":"<p>A module that contains models of the users package.</p> Classes <ul> <li><code>AuthUser</code>: A class that creating user model.</li> </ul>"},{"location":"reference/backend/api/users/models/#backend.api.users.models.AuthUser","title":"<code>AuthUser</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Model for authenticated users.</p> <p>Attributes:</p> Name Type Description <code>user_id</code> <code>models.UUIDField</code> <p>id of the user</p> <code>email</code> <code>models.EmailField</code> <p>the email of the user</p> <code>username</code> <code>models.CharField</code> <p>the username of the user</p> <code>password</code> <code>models.CharField</code> <p>the password of the user</p> <code>token</code> <code>models.CharField</code> <p>the token of the user</p> <code>created_at</code> <code>models.DateTimeField</code> <p>the datetime when user is created</p> <code>updated_at</code> <code>models.DateTimeField</code> <p>the updated datatime when updating the user</p> Methods <ul> <li><code>set_password(raw_password)</code>: A method to set user password to hash password</li> <li><code>check_password(new_password)</code>: A method to check if the password is correct or not</li> <li><code>set_token(email)</code>: A method to set user token</li> </ul> Source code in <code>backend/api/users/models.py</code> <pre><code>class AuthUser(models.Model):\n\"\"\"Model for authenticated users.\n\n    Attributes:\n        user_id: id of the user\n        email: the email of the user\n        username: the username of the user\n        password: the password of the user\n        token: the token of the user\n        created_at: the datetime when user is created\n        updated_at: the updated datatime when updating the user\n\n    Methods:\n        - [`set_password(raw_password)`][backend.api.users.models.AuthUser.set_password]:\n        A method to set user password to hash password\n        - [`check_password(new_password)`][backend.api.users.models.AuthUser.check_password]:\n        A method to check if the password is correct or not\n        - [`set_token(email)`][backend.api.users.models.AuthUser.set_token]:\n        A method to set user token\n    \"\"\"\n\n    class Meta:\n\"\"\"Metaclass for AuthUser model.\n\n        Attributes:\n            db_table: the table name\n        \"\"\"\n\n        db_table: str = \"api_auth_users\"\n\n    user_id: models.UUIDField = models.UUIDField(primary_key=True, default=uuid4, editable=False, db_index=True)\n\n    email: models.EmailField = models.EmailField(max_length=255, db_index=True, null=False, blank=False, unique=True)\n    username: models.CharField = models.CharField(max_length=50, db_index=True, null=False, blank=False, unique=True)\n    password: models.CharField = models.CharField(max_length=255, null=False, blank=False)\n    token: models.CharField = models.CharField(max_length=255, null=True, blank=True)\n\n    created_at: models.DateTimeField = models.DateTimeField(auto_now_add=True)\n    updated_at: models.DateTimeField = models.DateTimeField(auto_now=True, null=True)\n\n    def set_password(self, raw_password: str) -&gt; None:\n\"\"\"Set password for the user.\n\n        Args:\n            raw_password: The raw password entered by the user.\n        \"\"\"\n        self.password = make_password(raw_password)\n\n    def check_password(self, new_password: str) -&gt; bool:\n\"\"\"Check if the entered password is correct.\n\n        Args:\n            new_password: The new password entered by the user.\n\n        Returns:\n            True if the password is correct, else False.\n        \"\"\"\n        return check_password(new_password, self.password)\n\n    def set_token(self, email: str) -&gt; None:\n\"\"\"Generate and set token for the user.\n\n        Args:\n            email: Email of the user.\n        \"\"\"\n        self.token = generate_token(email, settings.SECRET_KEY)\n</code></pre>"},{"location":"reference/backend/api/users/models/#backend.api.users.models.AuthUser.Meta","title":"<code>Meta</code>","text":"<p>Metaclass for AuthUser model.</p> <p>Attributes:</p> Name Type Description <code>db_table</code> <code>str</code> <p>the table name</p> Source code in <code>backend/api/users/models.py</code> <pre><code>class Meta:\n\"\"\"Metaclass for AuthUser model.\n\n    Attributes:\n        db_table: the table name\n    \"\"\"\n\n    db_table: str = \"api_auth_users\"\n</code></pre>"},{"location":"reference/backend/api/users/models/#backend.api.users.models.AuthUser.check_password","title":"<code>check_password(new_password)</code>","text":"<p>Check if the entered password is correct.</p> <p>Parameters:</p> Name Type Description Default <code>new_password</code> <code>str</code> <p>The new password entered by the user.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the password is correct, else False.</p> Source code in <code>backend/api/users/models.py</code> <pre><code>def check_password(self, new_password: str) -&gt; bool:\n\"\"\"Check if the entered password is correct.\n\n    Args:\n        new_password: The new password entered by the user.\n\n    Returns:\n        True if the password is correct, else False.\n    \"\"\"\n    return check_password(new_password, self.password)\n</code></pre>"},{"location":"reference/backend/api/users/models/#backend.api.users.models.AuthUser.set_password","title":"<code>set_password(raw_password)</code>","text":"<p>Set password for the user.</p> <p>Parameters:</p> Name Type Description Default <code>raw_password</code> <code>str</code> <p>The raw password entered by the user.</p> required Source code in <code>backend/api/users/models.py</code> <pre><code>def set_password(self, raw_password: str) -&gt; None:\n\"\"\"Set password for the user.\n\n    Args:\n        raw_password: The raw password entered by the user.\n    \"\"\"\n    self.password = make_password(raw_password)\n</code></pre>"},{"location":"reference/backend/api/users/models/#backend.api.users.models.AuthUser.set_token","title":"<code>set_token(email)</code>","text":"<p>Generate and set token for the user.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email of the user.</p> required Source code in <code>backend/api/users/models.py</code> <pre><code>def set_token(self, email: str) -&gt; None:\n\"\"\"Generate and set token for the user.\n\n    Args:\n        email: Email of the user.\n    \"\"\"\n    self.token = generate_token(email, settings.SECRET_KEY)\n</code></pre>"},{"location":"reference/backend/api/users/serializers/","title":"serializers","text":"<p>A module that contains serializers of the users package.</p> Classes <ul> <li><code>UserSerializer</code>: A class that serializer the AuthUser model.</li> </ul>"},{"location":"reference/backend/api/users/serializers/#backend.api.users.serializers.UserSerializer","title":"<code>UserSerializer</code>","text":"<p>         Bases: <code>serializers.ModelSerializer</code></p> <p>Serializer for the AuthUser model.</p> <p>Attributes:</p> Name Type Description <code>password</code> <code>serializers.CharField</code> <p>The password of the user and it is written only</p> Methods <ul> <li><code>validate_password(password)</code>: A method to validate the user password when registering</li> </ul> Source code in <code>backend/api/users/serializers.py</code> <pre><code>class UserSerializer(serializers.ModelSerializer):\n\"\"\"Serializer for the AuthUser model.\n\n    Attributes:\n        password: The password of the user and it is written only\n\n    Methods:\n        - [`validate_password(password)`][backend.api.users.serializers.UserSerializer.validate_password]:\n        A method to validate the user password when registering\n    \"\"\"\n\n    password: serializers.CharField = serializers.CharField(write_only=True)\n\n    class Meta:\n\"\"\"Metaclass for UserSerializer.\n\n        Attributes:\n            model: The AuthUser model\n            fields: A list of AuthUser fields that need to be serialized\n        \"\"\"\n\n        model: AuthUser = AuthUser\n        fields: list[str] = [\n            \"user_id\",\n            \"email\",\n            \"username\",\n            \"password\",\n            \"created_at\",\n            \"updated_at\",\n        ]\n\n    def validate_password(self, password: str) -&gt; str:\n\"\"\"Validate the entered password.\n\n        Args:\n            password: The password entered by the user.\n\n        Raises:\n            serializers.ValidationError: If the password is less than 8 characters.\n\n        Returns:\n            The validated password.\n\n        \"\"\"\n        if len(password) &lt; 8:\n            raise serializers.ValidationError(\"Password must be more than 8 characters!\")\n        return password\n</code></pre>"},{"location":"reference/backend/api/users/serializers/#backend.api.users.serializers.UserSerializer.Meta","title":"<code>Meta</code>","text":"<p>Metaclass for UserSerializer.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>AuthUser</code> <p>The AuthUser model</p> <code>fields</code> <code>list[str]</code> <p>A list of AuthUser fields that need to be serialized</p> Source code in <code>backend/api/users/serializers.py</code> <pre><code>class Meta:\n\"\"\"Metaclass for UserSerializer.\n\n    Attributes:\n        model: The AuthUser model\n        fields: A list of AuthUser fields that need to be serialized\n    \"\"\"\n\n    model: AuthUser = AuthUser\n    fields: list[str] = [\n        \"user_id\",\n        \"email\",\n        \"username\",\n        \"password\",\n        \"created_at\",\n        \"updated_at\",\n    ]\n</code></pre>"},{"location":"reference/backend/api/users/serializers/#backend.api.users.serializers.UserSerializer.validate_password","title":"<code>validate_password(password)</code>","text":"<p>Validate the entered password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>The password entered by the user.</p> required <p>Raises:</p> Type Description <code>serializers.ValidationError</code> <p>If the password is less than 8 characters.</p> <p>Returns:</p> Type Description <code>str</code> <p>The validated password.</p> Source code in <code>backend/api/users/serializers.py</code> <pre><code>def validate_password(self, password: str) -&gt; str:\n\"\"\"Validate the entered password.\n\n    Args:\n        password: The password entered by the user.\n\n    Raises:\n        serializers.ValidationError: If the password is less than 8 characters.\n\n    Returns:\n        The validated password.\n\n    \"\"\"\n    if len(password) &lt; 8:\n        raise serializers.ValidationError(\"Password must be more than 8 characters!\")\n    return password\n</code></pre>"},{"location":"reference/backend/api/users/urls/","title":"urls","text":"<p>This module defines the urls of the users views.</p> Variables <ul> <li>urlpatterns: A list of url patterns of users views.</li> </ul>"},{"location":"reference/backend/api/users/views/","title":"views","text":"<p>This module contains the views of the users package.</p> Classes <ul> <li><code>UserRegisterAPI</code>: A class that contains post endpoint for user registration</li> <li><code>UserLoginAPI</code>: A class that contains post endpoint for user login</li> </ul>"},{"location":"reference/backend/api/users/views/#backend.api.users.views.UserLoginAPI","title":"<code>UserLoginAPI</code>","text":"<p>         Bases: <code>views.APIView</code></p> <p>API view for user login.</p> Methods <ul> <li><code>post</code>: A method for making POST request for user login</li> </ul> Source code in <code>backend/api/users/views.py</code> <pre><code>class UserLoginAPI(views.APIView):\n\"\"\"API view for user login.\n\n    Methods:\n        - [`post`][backend.api.users.views.UserLoginAPI.post]:\n        A method for making POST request for user login\n    \"\"\"\n\n    def post(self, request: Request) -&gt; Response:\n\"\"\"Handle POST request for user login.\n\n        Args:\n            request: The HTTP request object.\n\n        Returns:\n            The HTTP response object.\n        \"\"\"\n        payload = request.data\n\n        if \"email\" not in payload or payload[\"email\"] == \"\":\n            return Response({\n                \"status\": status.HTTP_400_BAD_REQUEST,\n                \"message\": \"Please correct the errors\",\n                \"email_error\": \"Email is required\",\n            })\n\n        if \"password\" not in payload or payload[\"password\"] == \"\":\n            return Response({\n                \"status\": status.HTTP_400_BAD_REQUEST,\n                \"message\": \"Please correct the errors\",\n                \"password_error\": \"Password is required\",\n            })\n\n        user = AuthUser.objects.filter(email=payload[\"email\"]).first()\n\n        if not user:\n            return Response({\n                \"status\": status.HTTP_404_NOT_FOUND,\n                \"message\": \"Please correct the errors\",\n                \"email_error\": \"User with this email is not found!\",\n            })\n\n        if not user.check_password(payload[\"password\"]):\n            return Response({\n                \"status\": status.HTTP_404_NOT_FOUND,\n                \"message\": \"Please correct the errors\",\n                \"password_error\": \"Password is not correct!\",\n            })\n\n        if user.token is None or user.token == \"\":\n            user.set_token(user.email)\n            user.save()\n\n        return Response({\n            \"status\": status.HTTP_200_OK,\n            \"message\": \"User logged successfully!\",\n            \"token\": user.token,\n        })\n</code></pre>"},{"location":"reference/backend/api/users/views/#backend.api.users.views.UserLoginAPI.post","title":"<code>post(request)</code>","text":"<p>Handle POST request for user login.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response object.</p> Source code in <code>backend/api/users/views.py</code> <pre><code>def post(self, request: Request) -&gt; Response:\n\"\"\"Handle POST request for user login.\n\n    Args:\n        request: The HTTP request object.\n\n    Returns:\n        The HTTP response object.\n    \"\"\"\n    payload = request.data\n\n    if \"email\" not in payload or payload[\"email\"] == \"\":\n        return Response({\n            \"status\": status.HTTP_400_BAD_REQUEST,\n            \"message\": \"Please correct the errors\",\n            \"email_error\": \"Email is required\",\n        })\n\n    if \"password\" not in payload or payload[\"password\"] == \"\":\n        return Response({\n            \"status\": status.HTTP_400_BAD_REQUEST,\n            \"message\": \"Please correct the errors\",\n            \"password_error\": \"Password is required\",\n        })\n\n    user = AuthUser.objects.filter(email=payload[\"email\"]).first()\n\n    if not user:\n        return Response({\n            \"status\": status.HTTP_404_NOT_FOUND,\n            \"message\": \"Please correct the errors\",\n            \"email_error\": \"User with this email is not found!\",\n        })\n\n    if not user.check_password(payload[\"password\"]):\n        return Response({\n            \"status\": status.HTTP_404_NOT_FOUND,\n            \"message\": \"Please correct the errors\",\n            \"password_error\": \"Password is not correct!\",\n        })\n\n    if user.token is None or user.token == \"\":\n        user.set_token(user.email)\n        user.save()\n\n    return Response({\n        \"status\": status.HTTP_200_OK,\n        \"message\": \"User logged successfully!\",\n        \"token\": user.token,\n    })\n</code></pre>"},{"location":"reference/backend/api/users/views/#backend.api.users.views.UserRegisterAPI","title":"<code>UserRegisterAPI</code>","text":"<p>         Bases: <code>views.APIView</code></p> <p>API View for user registration.</p> Methods <ul> <li><code>post</code>: A method for making POST request to register user</li> </ul> Source code in <code>backend/api/users/views.py</code> <pre><code>class UserRegisterAPI(views.APIView):\n\"\"\"API View for user registration.\n\n    Methods:\n        - [`post`][backend.api.users.views.UserRegisterAPI.post]:\n        A method for making POST request to register user\n    \"\"\"\n\n    def post(self, request: Request) -&gt; Response:\n\"\"\"Handle POST requests for user registration.\n\n        Args:\n            request: The HTTP request object.\n\n        Returns:\n            The HTTP response object.\n        \"\"\"\n        payload = request.data\n\n        user_serializer = UserSerializer(data=payload)\n\n        if user_serializer.is_valid():\n            user = AuthUser(\n                username=payload[\"username\"],\n                email=payload[\"email\"],\n            )\n            user.set_password(payload[\"password\"])\n            user.set_token(payload[\"email\"])\n            user.save()\n\n            return Response({\n                \"status\": status.HTTP_200_OK,\n                \"message\": \"User registered successfully!\",\n                \"user\": UserSerializer(user).data\n            })\n        else:\n\n            email_error = None\n            username_error = None\n            password_error = None\n\n            if \"email\" in user_serializer.errors:\n                email_error = user_serializer.errors[\"email\"][0]\n            if \"username\" in user_serializer.errors:\n                username_error = user_serializer.errors[\"username\"][0]\n            if \"password\" in user_serializer.errors:\n                password_error = user_serializer.errors[\"password\"][0]\n\n            return Response({\n                \"status\": status.HTTP_400_BAD_REQUEST,\n                \"message\": \"Please correct the errors\",\n                \"email_error\": email_error,\n                \"username_error\": username_error,\n                \"password_error\": password_error,\n            })\n</code></pre>"},{"location":"reference/backend/api/users/views/#backend.api.users.views.UserRegisterAPI.post","title":"<code>post(request)</code>","text":"<p>Handle POST requests for user registration.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>The HTTP response object.</p> Source code in <code>backend/api/users/views.py</code> <pre><code>def post(self, request: Request) -&gt; Response:\n\"\"\"Handle POST requests for user registration.\n\n    Args:\n        request: The HTTP request object.\n\n    Returns:\n        The HTTP response object.\n    \"\"\"\n    payload = request.data\n\n    user_serializer = UserSerializer(data=payload)\n\n    if user_serializer.is_valid():\n        user = AuthUser(\n            username=payload[\"username\"],\n            email=payload[\"email\"],\n        )\n        user.set_password(payload[\"password\"])\n        user.set_token(payload[\"email\"])\n        user.save()\n\n        return Response({\n            \"status\": status.HTTP_200_OK,\n            \"message\": \"User registered successfully!\",\n            \"user\": UserSerializer(user).data\n        })\n    else:\n\n        email_error = None\n        username_error = None\n        password_error = None\n\n        if \"email\" in user_serializer.errors:\n            email_error = user_serializer.errors[\"email\"][0]\n        if \"username\" in user_serializer.errors:\n            username_error = user_serializer.errors[\"username\"][0]\n        if \"password\" in user_serializer.errors:\n            password_error = user_serializer.errors[\"password\"][0]\n\n        return Response({\n            \"status\": status.HTTP_400_BAD_REQUEST,\n            \"message\": \"Please correct the errors\",\n            \"email_error\": email_error,\n            \"username_error\": username_error,\n            \"password_error\": password_error,\n        })\n</code></pre>"}]}